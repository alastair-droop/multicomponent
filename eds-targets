#!/usr/bin/env python3
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import argparse
import zipfile
import re
from sys import stderr, exit
import xml.etree.ElementTree as eTree

# Set the script version number:
version = '0.1a (2017-02-10)'

# Set up the command line arguments & parse them:
parser = argparse.ArgumentParser(description = 'Extract well data from an EDS file')
parser.add_argument('-v', '--version', action='version', version='%(prog)s {0}'.format(version))
parser.add_argument(dest='input_file', help='the input EDS file')
args = parser.parse_args()

def error(msg, status=1):
    print('ERROR: {}'.format(msg), file=stderr)
    exit(status)

# Open the EDS zip file:
zip_file = zipfile.ZipFile(args.input_file, mode='r')

# Get the plate_setup file by its name:
filename_re = re.compile('.*plate_setup\\.xml$')
filename = None
for f in zip_file.infolist():
    if filename_re.match(f.filename) != None:
        filename = f.filename
        break
if filename is None: error('plate_setup XML data not present')
ps_file = zip_file.open(filename, 'r')

# Parse the XML file:
tree = eTree.parse(ps_file)
root = tree.getroot()

# Extract the well dimensions:
row_n = int(root.find('Rows').text)
col_n = int(root.find('Columns').text)
well_n = row_n * col_n

# Object to hold the well data:
well_data = {}

# Iterate through the FeatureMaps:
for featureMap in root.findall('FeatureMap'):
    feature_id = featureMap.find('Feature').find('Id').text
    if feature_id != 'detector-task': continue
    for wellFeature in featureMap.findall('FeatureValue'):
        well_index = int(wellFeature.find('Index').text)
        well_data[well_index] = wellFeature.find('FeatureItem').find('DetectorTaskList').find('DetectorTask').find('Detector').find('Name').text

# Close the ZIP file:
zip_file.close()

# Print out the data:
print('well\ttarget')
for well in range(well_n):
    print('{}\t{}'.format(well + 1, well_data[well]))
