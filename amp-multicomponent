#!/usr/bin/env python3

import argparse
import re
from sys import stderr, exit
from math import floor
from signal import signal, SIGPIPE, SIG_DFL

# Set the script version number:
version = '0.1a (2017-02-10)'

# Set up the command line arguments & parse them:
parser = argparse.ArgumentParser(description = 'Parse out intensity data from a ThermoFisher amplification output file')
parser.add_argument('-v', '--version', action='version', version='%(prog)s {0}'.format(version))
parser.add_argument(dest='input_file', help='the input amplification file')
args = parser.parse_args()

# Play nicely with head:
signal(SIGPIPE, SIG_DFL) 

def error(msg, status=1):
    print('ERROR: {}'.format(msg), file=stderr)
    exit(status)

signal_data = {}
with open(args.input_file, 'rt') as f:
    for line in f.readlines():
        line = line.strip()
        if line.startswith('#') or (len(line) == 0) or (line.startswith('Experiment Name')): continue
        line_data = line.split('\t')
        well = line_data[2]
        if well not in signal_data.keys():
            signal_data[well] = {}
            signal_data[well]['data'] = {}
            signal_data[well]['row'] = well[0]
            signal_data[well]['col'] = int(well[1:])
        cycle = floor(float(line_data[8]))
        rox = float(line_data[9])
        fam = float(line_data[5]) * rox
        signal_data[well]['data'][cycle] = {'ROX':rox, 'FAM':fam}

# Convert the well IDs to an index:
rows = sorted(list(set([signal_data[well]['row'] for well in signal_data.keys()])))
cols = sorted(list(set([signal_data[well]['col'] for well in signal_data.keys()])))
ncol = len(cols)
row_offset = dict(zip(rows, [rows.index(i) * ncol for i in rows]))
well_map = {}
for row in rows:
    for col in cols:
        well_map[row_offset[row] + col] = '{}{}'.format(row, col)

# Print out the data:
print('well\tcycle\tROX\tFAM')
for well in sorted(list(well_map.keys())):
    try: well_data = signal_data[well_map[well]]
    except: error('missing data for well {}'.format(well))
    for cycle in sorted(well_data['data'].keys()):
        print('{}\t{}\t{:.2f}\t{:.2f}'.format(well, cycle, well_data['data'][cycle]['ROX'], well_data['data'][cycle]['FAM']))
